{"ast":null,"code":"import _classCallCheck from \"/Users/lloydrhodes/Desktop/noughts-and-crosses/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/lloydrhodes/Desktop/noughts-and-crosses/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/lloydrhodes/Desktop/noughts-and-crosses/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/lloydrhodes/Desktop/noughts-and-crosses/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/lloydrhodes/Desktop/noughts-and-crosses/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/lloydrhodes/Desktop/noughts-and-crosses/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Board from './Components/Board';\nimport Scoreboard from './Components/Scoreboard';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      turn: 'x',\n      board: ['', '', '', '', '', '', '', '', ''],\n      gameOver: false,\n      winner: '',\n      player1: 0,\n      player2: 0,\n      clickCounter: 0\n    };\n\n    _this.saveData = function () {\n      localStorage.setItem('state', JSON.stringify(_this.state));\n    };\n\n    _this.getPosition = function (position) {\n      _this.updateBoardState(position);\n    };\n\n    _this.updateBoardState = function (position) {\n      if (!_this.state.gameOver) {\n        _this.setState(function (_ref) {\n          var board = _ref.board,\n              turn = _ref.turn,\n              clickCounter = _ref.clickCounter;\n          var updatedBoard = board.map(function (item, index) {\n            if (index === Number(position) && item === '') {\n              item = turn;\n            }\n\n            return item;\n          });\n          return {\n            board: updatedBoard,\n            clickCounter: clickCounter + 1\n          };\n        }, function () {\n          _this.checkWinner();\n        });\n      }\n    };\n\n    _this.checkWinner = function () {\n      var winningCombination = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n      var _this$state = _this.state,\n          turn = _this$state.turn,\n          clickCounter = _this$state.clickCounter;\n      var winner = winningCombination.filter(function (subArray) {\n        return subArray.every(function (element) {\n          return _this.state.board[element] === turn;\n        });\n      });\n\n      if (winner.length === 1) {\n        var player;\n\n        if (turn === \"x\") {\n          player = \"player1\";\n        } else {\n          player = \"player2\";\n        }\n\n        _this.setState(function (prevState) {\n          return {\n            gameOver: true,\n            winner: turn,\n            player: prevState[player]++\n          };\n        });\n      } else if (clickCounter === 9) {\n        _this.setState(function () {\n          return {\n            gameOver: true,\n            winner: \"draw\"\n          };\n        });\n      }\n\n      _this.setState(function () {\n        return {\n          turn: turn === 'x' ? 'o' : 'x'\n        };\n      });\n    };\n\n    _this.handlePlayAgain = function () {\n      _this.setState({\n        turn: 'x',\n        board: ['', '', '', '', '', '', '', '', ''],\n        gameOver: false,\n        winner: '',\n        clickCounter: 0\n      });\n    };\n\n    _this.handleReset = function () {\n      _this.setState({\n        player1: 0,\n        player2: 0,\n        turn: 'x',\n        board: ['', '', '', '', '', '', '', '', ''],\n        gameOver: false,\n        winner: '',\n        clickCounter: 0\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          board = _this$state2.board,\n          gameOver = _this$state2.gameOver,\n          player1 = _this$state2.player1,\n          player2 = _this$state2.player2,\n          winner = _this$state2.winner;\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, React.createElement(Scoreboard, {\n        handlePlayAgain: this.handlePlayAgain,\n        player1: player1,\n        player2: player2,\n        winner: winner,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }), React.createElement(Board, {\n        getPosition: this.getPosition,\n        board: board,\n        gamOver: gameOver,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"reset\",\n        onClick: this.handleReset,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, \"Reset Scoreboard\"));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var storedState = localStorage.getItem('state');\n\n      if (storedState) {\n        this.setState(JSON.parse(storedState));\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProprs, prevState) {\n      this.saveData();\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/lloydrhodes/Desktop/noughts-and-crosses/src/App.js"],"names":["React","Component","Board","Scoreboard","App","state","turn","board","gameOver","winner","player1","player2","clickCounter","saveData","localStorage","setItem","JSON","stringify","getPosition","position","updateBoardState","setState","updatedBoard","map","item","index","Number","checkWinner","winningCombination","filter","subArray","every","element","length","player","prevState","handlePlayAgain","handleReset","storedState","getItem","parse","prevProprs"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Board from './Components/Board';\nimport Scoreboard from './Components/Scoreboard';\n\nclass App extends Component {\n  state = {\n    turn: 'x',\n    board: ['', '', '', '', '', '', '', '', ''],\n    gameOver: false,\n    winner: '',\n    player1: 0,\n    player2: 0,\n    clickCounter: 0\n  }\n  render() {\n    const { board, gameOver, player1, player2, winner } = this.state;\n\n    return (\n      <div className=\"App\">\n        <Scoreboard handlePlayAgain={this.handlePlayAgain} player1={player1} player2={player2} winner={winner} />\n        <Board getPosition={this.getPosition} board={board} gamOver={gameOver} />\n        <button className=\"reset\" onClick={this.handleReset}>Reset Scoreboard</button>\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    const storedState = localStorage.getItem('state')\n    if (storedState) {\n      this.setState(JSON.parse(storedState));\n    }\n  }\n\n  componentDidUpdate(prevProprs, prevState) {\n    this.saveData()\n  }\n\n  saveData = () => {\n    localStorage.setItem('state', JSON.stringify(this.state));\n  }\n\n  getPosition = (position) => {\n    this.updateBoardState(position)\n  }\n  updateBoardState = (position) => {\n    if (!this.state.gameOver) {\n      this.setState(({ board, turn, clickCounter }) => {\n        const updatedBoard = board.map((item, index) => {\n          if (index === Number(position) && item === '') {\n            item = turn;\n          }\n          return item;\n        })\n        return {\n          board: updatedBoard,\n          clickCounter: clickCounter + 1\n        }\n      }, () => {\n        this.checkWinner();\n      })\n    }\n\n\n  }\n  checkWinner = () => {\n    const winningCombination = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n    const { turn, clickCounter } = this.state;\n    const winner = winningCombination.filter(subArray => {\n      return (subArray.every((element) => {\n        return this.state.board[element] === turn;\n      }))\n    })\n    if (winner.length === 1) {\n      let player\n      if (turn === \"x\") {\n        player = \"player1\"\n      } else {\n        player = \"player2\"\n      }\n\n      this.setState((prevState) => ({\n        gameOver: true,\n        winner: turn,\n        player: prevState[player]++\n      }))\n    }\n    else if (clickCounter === 9) {\n      this.setState(() => ({\n        gameOver: true,\n        winner: \"draw\"\n      }))\n    }\n\n    this.setState(() => ({\n      turn: turn === 'x' ? 'o' : 'x'\n    }))\n\n  }\n\n  handlePlayAgain = () => {\n    this.setState({\n      turn: 'x',\n      board: ['', '', '', '', '', '', '', '', ''],\n      gameOver: false,\n      winner: '',\n      clickCounter: 0\n    })\n  }\n\n  handleReset = () => {\n    this.setState({\n      player1: 0,\n      player2: 0,\n      turn: 'x',\n      board: ['', '', '', '', '', '', '', '', ''],\n      gameOver: false,\n      winner: '',\n      clickCounter: 0\n    })\n  }\n\n}\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}